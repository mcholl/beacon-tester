Beacon Tester:

	- Sync the tineout and the sleep
	-	Eventually, split off the read into its own backgrounder function
	
	Define basic Scenarios to be run:
		-	All Front Pages have the basic beacons: Omniture, Chartbeat, Double_Click, Comscrore
			This scenario just hits the home page of each site an verifies the basic analytic tags all fire

		-	Subscription pages should have the following beacons: Marin
			This scenario (which was the actual original requirement) verifies that a user can subscribe to the paper, and that the Marin Tag fires at the end of it with the correct parameters

		-	Marketing tags on each section front for selected papers: TBD
			Here we need a matrix of marketing tag and the pages on which we expect them.  It will grow over time

	Refactor the Tests:
	-	Structure the tests such that we get to the page in a setup scenario, then each beacon should be a separate scenario so that it can report the status of eah beacon correctly
		This may entail the need to bring in VCR and WebMock.  The idea is that the background would read the traffic and record it. Each test can then play it back as needed.  Note also, I can differentiate between what I am doing now in "capturing" traffic and actually "recording" traffic.

	- Implement a Values Table:
		- Setup a table for 5 papers with default beacons
		-	See that Cucumber executes it 5 times
	
	-	Plan out a basic matrix of sites, beacons, values to test that generates the feature files in the format I want

	Build the Matrix:

	Be able to collected network traffic and replay it:
		-	Be able to save a HAR file
		-	Be able to populate the beacons array from the HAR File
		-	See what happens with a tag that does a POST. Per Rob, most of them are Gets, but we probably need POSTs too.

	Be able to monitor the tags consistently:
	-	Set up a Jenkins job to execute tests and notify XXX of any failures

	Set up a CI server to run this:

	Document it:



＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
	-	Share github repo with Joe Youngquist and Rob Klause @done(2014-09-11) @project(Beacon Tester)
	- with a timeout @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	-	optionally with screenshots @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	- Be able to support the following parameter tests: @done(2014-09-11) @project(Beacon Tester)
	- Beacon Calls: @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	- There will be a beacon call to a url of xxx	[required] @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	-	There will NOT be a call to a url of xxx	[excluded] @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	-	There will be n beacon calls to a url of xxx	[required n or more calls] @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	-	There could be a beacon call to a url of xxx [optional] @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	- Parameters: @done(2014-09-11) @project(Beacon Tester / Be able to collected network traffic)
	-	Parameter matches value @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	-	Parameter contains value @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	-	Parameter matches regular expression @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	-	Parameter has a value of {string, numeric, date} @done(2014-09-10) @project(Beacon Tester / Be able to collected network traffic)
	-	Be able to specify "a XXX parameter" or "an XXX parameter" @done(2014-09-11) @project(Beacon Tester / Be able to collected network traffic)
	-	If the beacon call defining an optional service does not exist, skip the parameter tests @done(2014-09-11) @project(Beacon Tester / Be able to collected network traffic)
		Structure the "could be a becacon called" such that if it doesn't find the url, the service is added to a optionalbeacons{} map.  If the key exists in the map, then value comparisons are simply skipped.
	-	Omniture specific parameters: @done(2014-09-11) @project(Beacon Tester / Be able to collected network traffic)
	- RSID @done(2014-09-11) @project(Beacon Tester / Be able to collected network traffic)
	-	variable expansion @done(2014-09-11) @project(Beacon Tester / Be able to collected network traffic)
